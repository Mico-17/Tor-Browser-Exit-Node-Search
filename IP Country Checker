import tkinter as tk
from tkinter import messagebox, scrolledtext
import requests


def get_ip_info(ip, token):
    """
    Fetches the geographical information of an IP address using ipinfo.io API.

    :param ip: str : IP address
    :param token: str : ipinfo.io API token
    :return: dict : Information about the IP address or None if there's an error
    """
    url = f"https://ipinfo.io/{ip}?token={token}"
    try:
        response = requests.get(url)
        response.raise_for_status()
        return response.json()
    except requests.exceptions.HTTPError as http_err:
        print(f"HTTP error occurred for IP {ip}: {http_err}")
    except requests.exceptions.RequestException as err:
        print(f"Error fetching data for IP {ip}: {err}")
    return None


def organize_ips_by_country(ip_addresses, token):
    """
    Organizes IP addresses by their country.

    :param ip_addresses: list : List of IP addresses
    :param token: str : ipinfo.io API token
    :return: dict : IP addresses organized by country
    """
    organized_ips = {}
    for ip in ip_addresses:
        info = get_ip_info(ip, token)
        if info:
            country = info.get('country')
            if country:
                if country not in organized_ips:
                    organized_ips[country] = []
                organized_ips[country].append(ip)
            else:
                print(f"No country information found for IP {ip}")
        else:
            print(f"Failed to retrieve information for IP {ip}")
    return organized_ips


def fetch_and_organize_ips():
    ip_list = ip_text.get("1.0", tk.END).strip().split("\n")
    token = api_token_entry.get().strip()
    if not token:
        messagebox.showerror("Error", "Please enter a valid API token.")
        return

    organized_ips = organize_ips_by_country(ip_list, token)

    output_text.delete("1.0", tk.END)
    if organized_ips:
        for country, ips in organized_ips.items():
            output_text.insert(tk.END, f"{country}:\n")
            for ip in ips:
                output_text.insert(tk.END, f"  {ip}\n")
    else:
        output_text.insert(tk.END, "No IP addresses organized by country.")


# Create the main window
root = tk.Tk()
root.title("IP Organizer by Country")

# Create and place the widgets
tk.Label(root, text="Enter IP Addresses (one per line):").grid(row=0, column=0, padx=10, pady=10)
ip_text = scrolledtext.ScrolledText(root, width=50, height=10)
ip_text.grid(row=1, column=0, padx=10, pady=10)

tk.Label(root, text="Enter ipinfo.io API Token:").grid(row=2, column=0, padx=10, pady=10)
api_token_entry = tk.Entry(root, width=50)
api_token_entry.grid(row=3, column=0, padx=10, pady=10)

fetch_button = tk.Button(root, text="Fetch and Organize", command=fetch_and_organize_ips)
fetch_button.grid(row=4, column=0, padx=10, pady=10)

output_text = scrolledtext.ScrolledText(root, width=50, height=10)
output_text.grid(row=5, column=0, padx=10, pady=10)

# Run the GUI event loop
root.mainloop()
